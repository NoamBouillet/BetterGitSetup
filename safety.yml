name: safety

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  MIRROR_URL: ${{ secrets.MIRROR_URL }}
  EXECUTABLES: ${{ secrets.EXECUTABLES }}

permissions:
  contents: read
  pull-requests: write

jobs:
  check_repo:
    runs-on: ubuntu-latest
    outputs:
      is_mirror: ${{ steps.detect.outputs.is_mirror }}
    steps:
      - name: Detect mirror repo or ignored branch
        id: detect
        run: |
          repo_ssh_url="git@github.com:${{ github.repository }}.git"
          if [[ "$repo_ssh_url" == "${{ env.MIRROR_URL }}" || "${{ github.ref }}" == refs/heads/ga-ignore-* ]]; then
            echo "Skipping: Mirror repository or ignored branch"
            echo "is_mirror=true" >> $GITHUB_OUTPUT
          else
            echo "is_mirror=false" >> $GITHUB_OUTPUT
          fi

  check_coding_style:
    needs: check_repo
    if: needs.check_repo.outputs.is_mirror == 'false'
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    timeout-minutes: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run coding style check
        run: check.sh $(pwd) $(pwd)
      - name: Display coding style errors
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line; do
              filename=$(echo "$line" | awk -F ':' '{print $1}')
              line_number=$(echo "$line" | awk -F ':' '{print $2}')
              error_type=$(echo "$line" | awk -F ':' '{print $3}')
              output=$(echo "$line" | cut -d ':' -f4-)
              echo "::error title=$error_type coding style error,file=$filename,line=$line_number::$output"
            done < coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    timeout-minutes: 2
    needs: check_coding_style
    if: needs.check_repo.outputs.is_mirror == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Compile
        run: make
      - name: Clean
        run: make clean
      - name: Check executables
        run: |
          IFS=',' read -r -a EXECS <<< "${EXECUTABLES}"
          for exec in "${EXECS[@]}"; do
            if [ ! -x "$exec" ]; then
              echo "::error file=$exec::Missing or non-executable $exec"
              exit 1
            fi
          done

  run_tests:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    timeout-minutes: 2
    needs: check_program_compilation
    if: needs.check_repo.outputs.is_mirror == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run tests
        run: make tests_run

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    if: needs.check_repo.outputs.is_mirror == 'false' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
